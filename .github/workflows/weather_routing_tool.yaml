name: Linting, Testing, and Coverage

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'
  workflow_dispatch:

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.11", "3.12", "3.13"]
    
    env:
      WRT_WEATHER_DATA: '${{ github.workspace }}/tests/data/reduced_testdata_weather.nc'
      WRT_DEPTH_DATA: '${{ github.workspace }}/tests/data/reduced_testdata_depth.nc'
      WRT_BASE_PATH: '${{ github.workspace }}'
      GL_TOKEN: '${{ secrets.GL_TOKEN }}'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libproj-dev proj-data proj-bin libgeos-dev
      
      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install proj geos
      
      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          # Windows binaries are typically bundled with wheels
          echo "Windows dependencies handled by wheels"
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.test.txt
          pip install -r requirements-without-deps.txt --no-deps
          pip install pytest-cov coverage[toml]
      
      - name: Install MariPower (optional)
        if: env.GL_TOKEN != ''
        continue-on-error: true
        run: |
          pip install git+https://git:${{ secrets.GL_TOKEN }}@collaborating.tuhh.de/m-8/fds-research-projects/maridata/maripower.git
      
      - name: Run linting (flake8)
        run: |
          flake8 --max-line-length=120 --extend-ignore F401,F403,F405,E711 WeatherRoutingTool tests cli.py
      
      - name: Run tests with coverage
        run: |
          pytest tests --cov=WeatherRoutingTool --cov-report=xml --cov-report=term
      
      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
  
  lint-format:
    name: Code Quality (ruff & black)
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install linting tools
        run: |
          pip install ruff black
      
      - name: Run ruff
        run: |
          ruff check WeatherRoutingTool tests --line-length=120
      
      - name: Check formatting with black
        run: |
          black --check --line-length=120 WeatherRoutingTool tests cli.py
